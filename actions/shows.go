package actions

import (
	"github.com/bketelsen/gotimefm/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Show)
// DB Table: Plural (shows)
// Resource: Plural (Shows)
// Path: Plural (/shows)
// View Template Folder: Plural (/templates/shows/)

// ShowsResource is the resource for the show model
type ShowsResource struct {
	buffalo.Resource
}

// List gets all Shows. This function is mapped to the path
// GET /shows
func (v ShowsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	shows := &models.Shows{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Shows from the DB
	if err := q.All(shows); err != nil {
		return errors.WithStack(err)
	}

	// Make Shows available inside the html template
	c.Set("shows", shows)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("shows/index.html"))
}

// Show gets the data for one Show. This function is mapped to
// the path GET /shows/{show_id}
func (v ShowsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Show
	show := &models.Show{}

	// To find the Show the parameter show_id is used.
	if err := tx.Find(show, c.Param("show_id")); err != nil {
		return c.Error(404, err)
	}

	// Make show available inside the html template
	c.Set("show", show)

	return c.Render(200, r.HTML("shows/show.html"))
}

// New renders the form for creating a new Show.
// This function is mapped to the path GET /shows/new
func (v ShowsResource) New(c buffalo.Context) error {
	// Make show available inside the html template
	c.Set("show", &models.Show{})

	return c.Render(200, r.HTML("shows/new.html"))
}

// Create adds a Show to the DB. This function is mapped to the
// path POST /shows
func (v ShowsResource) Create(c buffalo.Context) error {
	// Allocate an empty Show
	show := &models.Show{}

	// Bind show to the html form elements
	if err := c.Bind(show); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(show)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make show available inside the html template
		c.Set("show", show)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("shows/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Show was created successfully")

	// and redirect to the shows index page
	return c.Redirect(302, "/shows/%s", show.ID)
}

// Edit renders a edit form for a show. This function is
// mapped to the path GET /shows/{show_id}/edit
func (v ShowsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Show
	show := &models.Show{}

	if err := tx.Find(show, c.Param("show_id")); err != nil {
		return c.Error(404, err)
	}

	// Make show available inside the html template
	c.Set("show", show)
	return c.Render(200, r.HTML("shows/edit.html"))
}

// Update changes a show in the DB. This function is mapped to
// the path PUT /shows/{show_id}
func (v ShowsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Show
	show := &models.Show{}

	if err := tx.Find(show, c.Param("show_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Show to the html form elements
	if err := c.Bind(show); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(show)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make show available inside the html template
		c.Set("show", show)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("shows/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Show was updated successfully")

	// and redirect to the shows index page
	return c.Redirect(302, "/shows/%s", show.ID)
}

// Destroy deletes a show from the DB. This function is mapped
// to the path DELETE /shows/{show_id}
func (v ShowsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Show
	show := &models.Show{}

	// To find the Show the parameter show_id is used.
	if err := tx.Find(show, c.Param("show_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(show); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Show was destroyed successfully")

	// Redirect to the shows index page
	return c.Redirect(302, "/shows")
}
