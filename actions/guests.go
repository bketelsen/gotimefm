package actions

import (
	"github.com/bketelsen/gotimefm/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Guest)
// DB Table: Plural (guests)
// Resource: Plural (Guests)
// Path: Plural (/guests)
// View Template Folder: Plural (/templates/guests/)

// GuestsResource is the resource for the guest model
type GuestsResource struct {
	buffalo.Resource
}

// List gets all Guests. This function is mapped to the path
// GET /guests
func (v GuestsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	guests := &models.Guests{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Guests from the DB
	if err := q.All(guests); err != nil {
		return errors.WithStack(err)
	}

	// Make Guests available inside the html template
	c.Set("guests", guests)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("guests/index.html"))
}

// Show gets the data for one Guest. This function is mapped to
// the path GET /guests/{guest_id}
func (v GuestsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Guest
	guest := &models.Guest{}

	// To find the Guest the parameter guest_id is used.
	if err := tx.Find(guest, c.Param("guest_id")); err != nil {
		return c.Error(404, err)
	}

	// Make guest available inside the html template
	c.Set("guest", guest)

	return c.Render(200, r.HTML("guests/show.html"))
}

// New renders the form for creating a new Guest.
// This function is mapped to the path GET /guests/new
func (v GuestsResource) New(c buffalo.Context) error {
	// Make guest available inside the html template
	c.Set("guest", &models.Guest{})

	return c.Render(200, r.HTML("guests/new.html"))
}

// Create adds a Guest to the DB. This function is mapped to the
// path POST /guests
func (v GuestsResource) Create(c buffalo.Context) error {
	// Allocate an empty Guest
	guest := &models.Guest{}

	// Bind guest to the html form elements
	if err := c.Bind(guest); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(guest)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make guest available inside the html template
		c.Set("guest", guest)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("guests/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Guest was created successfully")

	// and redirect to the guests index page
	return c.Redirect(302, "/guests/%s", guest.ID)
}

// Edit renders a edit form for a guest. This function is
// mapped to the path GET /guests/{guest_id}/edit
func (v GuestsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Guest
	guest := &models.Guest{}

	if err := tx.Find(guest, c.Param("guest_id")); err != nil {
		return c.Error(404, err)
	}

	// Make guest available inside the html template
	c.Set("guest", guest)
	return c.Render(200, r.HTML("guests/edit.html"))
}

// Update changes a guest in the DB. This function is mapped to
// the path PUT /guests/{guest_id}
func (v GuestsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Guest
	guest := &models.Guest{}

	if err := tx.Find(guest, c.Param("guest_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Guest to the html form elements
	if err := c.Bind(guest); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(guest)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make guest available inside the html template
		c.Set("guest", guest)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("guests/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Guest was updated successfully")

	// and redirect to the guests index page
	return c.Redirect(302, "/guests/%s", guest.ID)
}

// Destroy deletes a guest from the DB. This function is mapped
// to the path DELETE /guests/{guest_id}
func (v GuestsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Guest
	guest := &models.Guest{}

	// To find the Guest the parameter guest_id is used.
	if err := tx.Find(guest, c.Param("guest_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(guest); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Guest was destroyed successfully")

	// Redirect to the guests index page
	return c.Redirect(302, "/guests")
}
