package actions

import (
	"github.com/bketelsen/gotimefm/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Prospect)
// DB Table: Plural (prospects)
// Resource: Plural (Prospects)
// Path: Plural (/prospects)
// View Template Folder: Plural (/templates/prospects/)

// ProspectsResource is the resource for the prospect model
type ProspectsResource struct {
	buffalo.Resource
}

// List gets all Prospects. This function is mapped to the path
// GET /prospects
func (v ProspectsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	prospects := &models.Prospects{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Prospects from the DB
	if err := q.All(prospects); err != nil {
		return errors.WithStack(err)
	}

	// Make Prospects available inside the html template
	c.Set("prospects", prospects)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("prospects/index.html"))
}

// Show gets the data for one Prospect. This function is mapped to
// the path GET /prospects/{prospect_id}
func (v ProspectsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Prospect
	prospect := &models.Prospect{}

	// To find the Prospect the parameter prospect_id is used.
	if err := tx.Find(prospect, c.Param("prospect_id")); err != nil {
		return c.Error(404, err)
	}

	// Make prospect available inside the html template
	c.Set("prospect", prospect)

	return c.Render(200, r.HTML("prospects/show.html"))
}

// New renders the form for creating a new Prospect.
// This function is mapped to the path GET /prospects/new
func (v ProspectsResource) New(c buffalo.Context) error {
	// Make prospect available inside the html template
	c.Set("prospect", &models.Prospect{})

	return c.Render(200, r.HTML("prospects/new.html"))
}

// Create adds a Prospect to the DB. This function is mapped to the
// path POST /prospects
func (v ProspectsResource) Create(c buffalo.Context) error {
	// Allocate an empty Prospect
	prospect := &models.Prospect{}

	// Bind prospect to the html form elements
	if err := c.Bind(prospect); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(prospect)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make prospect available inside the html template
		c.Set("prospect", prospect)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("prospects/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Prospect was created successfully")

	// and redirect to the prospects index page
	return c.Redirect(302, "/prospects/%s", prospect.ID)
}

// Edit renders a edit form for a prospect. This function is
// mapped to the path GET /prospects/{prospect_id}/edit
func (v ProspectsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Prospect
	prospect := &models.Prospect{}

	if err := tx.Find(prospect, c.Param("prospect_id")); err != nil {
		return c.Error(404, err)
	}

	// Make prospect available inside the html template
	c.Set("prospect", prospect)
	return c.Render(200, r.HTML("prospects/edit.html"))
}

// Update changes a prospect in the DB. This function is mapped to
// the path PUT /prospects/{prospect_id}
func (v ProspectsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Prospect
	prospect := &models.Prospect{}

	if err := tx.Find(prospect, c.Param("prospect_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Prospect to the html form elements
	if err := c.Bind(prospect); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(prospect)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make prospect available inside the html template
		c.Set("prospect", prospect)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("prospects/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Prospect was updated successfully")

	// and redirect to the prospects index page
	return c.Redirect(302, "/prospects/%s", prospect.ID)
}

// Destroy deletes a prospect from the DB. This function is mapped
// to the path DELETE /prospects/{prospect_id}
func (v ProspectsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Prospect
	prospect := &models.Prospect{}

	// To find the Prospect the parameter prospect_id is used.
	if err := tx.Find(prospect, c.Param("prospect_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(prospect); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Prospect was destroyed successfully")

	// Redirect to the prospects index page
	return c.Redirect(302, "/prospects")
}
